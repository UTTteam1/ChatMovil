{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alex1\\\\OneDrive\\\\Im\\xE1genes\\\\Socket\\\\ChatApplication\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client'; //import axios from \"axios\";\n\nimport alertify from 'alertifyjs';\nimport 'alertifyjs/build/css/alertify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  var axios = require('axios');\n\n  const [list, setList] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: '',\n    password: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n  /*\r\n  const Act = () => {\r\n      console.log(\"aqui tamos\");\r\n      console.log(userData);\r\n      \r\n  }\r\n  */\n\n  const connect = () => {\n    var config = {\n      method: 'get',\n      url: 'http://localhost:1921/api/usuario/' + userData.username + '/' + userData.password\n    };\n    axios(config).then(function (response) {\n      let resp = response.data;\n      console.log(resp);\n      setList(resp);\n\n      if (resp.length > 0) {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError); //alertify.success('Bienvenido '+ userData.username);\n\n        /*resp.forEach(amigo => {\r\n            console.log(\"Hola \"+amigo.user_name);\r\n            \r\n        });*/\n      } else {\n        alertify.error(\"Usuario o ContraseÃ±a Erronea\");\n        return;\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    if (payloadData.status === \"JOIN\") {\n      if (!privateChats.get(payloadData.senderName)) {\n        privateChats.set(payloadData.senderName, []);\n        setPrivateChats(new Map(privateChats));\n      }\n    } else {\n      publicChats.push(payloadData);\n      setPublicChats([...publicChats]);\n    }\n\n    console.log(payloadData.senderName);\n    list.fo;\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    console.log(list);\n\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const handlePassword = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"password\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Global\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 33\n          }, this)), [...list].map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `member ${tab === user.user_name && \"active\"}`,\n            children: user.user_name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 37\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 44\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 37\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"Password\",\n        placeholder: \"Enter your password\",\n        name: \"password\",\n        value: userData.password,\n        onChange: handlePassword,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatRoom, \"4MZqpFBcOuX07MiYtwfKeuZg/Bo=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/alex1/OneDrive/ImÃ¡genes/Socket/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","alertify","stompClient","ChatRoom","axios","require","list","setList","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","password","console","log","connect","config","method","url","then","response","resp","data","length","Sock","onConnected","onError","error","catch","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","fo","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","handlePassword","registerUser","keys","map","name","index","user","user_name","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\n//import axios from \"axios\";\r\nimport alertify from 'alertifyjs';\r\nimport 'alertifyjs/build/css/alertify.css';\r\n\r\nvar stompClient = null;\r\nconst ChatRoom = () => {\r\n    var axios = require('axios');\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    const [privateChats, setPrivateChats] = useState(new Map());\r\n\r\n    const [publicChats, setPublicChats] = useState([]);\r\n    const [tab, setTab] = useState(\"CHATROOM\");\r\n    const [userData, setUserData] = useState({\r\n        username: '',\r\n        receivername: '',\r\n        connected: false,\r\n        message: '',\r\n        password: ''\r\n    });\r\n    useEffect(() => {\r\n        console.log(userData);\r\n    }, [userData]);\r\n\r\n    /*\r\n    const Act = () => {\r\n        console.log(\"aqui tamos\");\r\n        console.log(userData);\r\n        \r\n    }\r\n    */\r\n\r\n    const connect = () => {\r\n        var config = {\r\n            method: 'get',\r\n            url: 'http://localhost:1921/api/usuario/' + userData.username + '/' + userData.password,\r\n        };\r\n        axios(config)\r\n            .then(function (response) {\r\n                let resp = response.data;\r\n                console.log(resp);\r\n                setList(resp);\r\n                if (resp.length > 0) {\r\n                    let Sock = new SockJS('http://localhost:8080/ws');\r\n                    stompClient = over(Sock);\r\n                    stompClient.connect({}, onConnected, onError);\r\n                    //alertify.success('Bienvenido '+ userData.username);\r\n                    /*resp.forEach(amigo => {\r\n                        console.log(\"Hola \"+amigo.user_name);\r\n                        \r\n                    });*/\r\n\r\n                } else {\r\n                    alertify.error(\"Usuario o ContraseÃ±a Erronea\");\r\n                    return;\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    const onConnected = () => {\r\n        setUserData({ ...userData, \"connected\": true });\r\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n        userJoin();\r\n    }\r\n\r\n    const userJoin = () => {\r\n        var chatMessage = {\r\n            senderName: userData.username,\r\n            status: \"JOIN\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n    }\r\n\r\n    const onMessageReceived = (payload) => {\r\n        var payloadData = JSON.parse(payload.body);\r\n\r\n        if (payloadData.status === \"JOIN\") {\r\n            if (!privateChats.get(payloadData.senderName)) {\r\n                privateChats.set(payloadData.senderName, []);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n        } else {\r\n            publicChats.push(payloadData);\r\n            setPublicChats([...publicChats]);\r\n        }\r\n        console.log(payloadData.senderName);\r\n\r\n        list.fo\r\n\r\n    }\r\n\r\n    const onPrivateMessage = (payload) => {\r\n        console.log(payload);\r\n        var payloadData = JSON.parse(payload.body);\r\n        if (privateChats.get(payloadData.senderName)) {\r\n            privateChats.get(payloadData.senderName).push(payloadData);\r\n            setPrivateChats(new Map(privateChats));\r\n        } else {\r\n            let list = [];\r\n            list.push(payloadData);\r\n            privateChats.set(payloadData.senderName, list);\r\n            setPrivateChats(new Map(privateChats));\r\n        }\r\n\r\n    }\r\n\r\n    const onError = (err) => {\r\n        console.log(err);\r\n\r\n    }\r\n\r\n    const handleMessage = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"message\": value });\r\n    }\r\n    const sendValue = () => {\r\n        console.log(list);\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n            console.log(chatMessage);\r\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n        }\r\n    }\r\n\r\n    const sendPrivateValue = () => {\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                receiverName: tab,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n\r\n            if (userData.username !== tab) {\r\n                privateChats.get(tab).push(chatMessage);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n        }\r\n    }\r\n\r\n    const handleUsername = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"username\": value });\r\n    }\r\n\r\n    const handlePassword = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"password\": value });\r\n    }\r\n\r\n    const registerUser = () => {\r\n        connect();\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            {userData.connected ?\r\n                <div className=\"chat-box\">\r\n\r\n\r\n                    <div className=\"member-list\">\r\n                        <ul>\r\n                            <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Global</li>\r\n\r\n                            {[...privateChats.keys()].map((name, index) => (\r\n                                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\r\n                            ))}\r\n\r\n                            {[...list].map((user, index) => (\r\n                                <li className={`member ${tab === user.user_name && \"active\"}`} key={index}>{user.user_name}</li>\r\n                            ))}\r\n\r\n                        </ul>\r\n                    </div>\r\n\r\n\r\n                    {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {publicChats.map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">{chat.message}</div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\r\n                        </div>\r\n                    </div>}\r\n\r\n\r\n\r\n                    {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {[...privateChats.get(tab)].map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">{chat.message}</div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n                :\r\n                <div className=\"register\">\r\n                    <input\r\n                        id=\"user-name\"\r\n                        placeholder=\"Enter your name\"\r\n                        name=\"userName\"\r\n                        value={userData.username}\r\n                        onChange={handleUsername}\r\n                        margin=\"normal\"\r\n                    />\r\n                    <input\r\n                        id=\"Password\"\r\n                        placeholder=\"Enter your password\"\r\n                        name=\"password\"\r\n                        value={userData.password}\r\n                        onChange={handlePassword}\r\n                        margin=\"normal\"\r\n                    />\r\n                    <button type=\"button\" onClick={registerUser}>\r\n                        connect\r\n                    </button>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom\r\n"]},"metadata":{},"sourceType":"module"}