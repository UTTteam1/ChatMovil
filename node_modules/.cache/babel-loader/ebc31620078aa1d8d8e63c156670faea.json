{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client'; //import axios from \"axios\";\n\nimport alertify from 'alertifyjs';\nimport 'alertifyjs/build/css/alertify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  var axios = require('axios');\n\n  let dataF = [];\n  const [list, setList] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: '',\n    password: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const Act = nameF => {\n    console.log(nameF);\n    let temp = [];\n    dataF.forEach(dat => {\n      if (nameF !== dat.user_name) {\n        temp.push(dat); //console.log(\"son diferentes\");\n      }\n    });\n    dataF = temp;\n    setList(temp);\n  };\n\n  const connect = () => {\n    var config = {\n      method: 'get',\n      url: 'http://localhost:1921/api/usuario/' + userData.username + '/' + userData.password\n    };\n    axios(config).then(function (response) {\n      let resp = response.data;\n\n      if (resp.length > 0) {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError);\n        resp.forEach(amigo => {\n          dataF.push(amigo);\n        });\n        alertify.success('Bienvenido ' + userData.username);\n      } else {\n        alertify.error(\"Usuario o ContraseÃ±a Erronea\");\n        return;\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    if (payloadData.status === \"JOIN\") {\n      if (!privateChats.get(payloadData.senderName)) {\n        privateChats.set(payloadData.senderName, []);\n        setPrivateChats(new Map(privateChats));\n      }\n    } else {\n      publicChats.push(payloadData);\n      setPublicChats([...publicChats]);\n    }\n\n    Act(payloadData.senderName);\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n\n    Act(payloadData.senderName);\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    console.log(list);\n\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n      alertify.success('Mensaje enviado a todos');\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n      alertify.success('Mensaje enviado a ' + tab);\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const handlePassword = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"password\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return (\n    /*#__PURE__*/\n    // CHAT\n    _jsxDEV(\"div\", {\n      className: \"container\",\n      children: userData.connected ?\n      /*#__PURE__*/\n      //lista\n      _jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"member-list\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            class: \"list-group list-group-horizontal position-relative overflow-auto w-75\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              class: \"list-group-item\",\n              onClick: () => {\n                setTab(\"CHATROOM\");\n              },\n              className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n              children: \"Todos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => {\n                setTab(name);\n              },\n              className: `member ${tab === name && \"active\"}`,\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this)), [...list].map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `member ${tab === user.user_name && \"active\"}`,\n              children: user.user_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"chat-messages\",\n            children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `message ${chat.senderName === userData.username && \"self\"}`,\n              children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 79\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-data\",\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar self\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 79\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"send-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-message\",\n              placeholder: \"Mensaje de texto\",\n              value: userData.message,\n              onChange: handleMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"send-button\",\n              onClick: sendValue,\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa fa-send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 95\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 44\n        }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"chat-messages\",\n            children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `message ${chat.senderName === userData.username && \"self\"}`,\n              children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 79\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-data\",\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 37\n              }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar self\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 79\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"send-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-message\",\n              placeholder: \"Mensaje de texto\",\n              value: userData.message,\n              onChange: handleMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"send-button\",\n              onClick: sendPrivateValue,\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa fa-send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 102\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this) :\n      /*#__PURE__*/\n      // LOGIN\n      _jsxDEV(\"div\", {\n        className: \"login\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          class: \"row\",\n          id: \"user-name\",\n          placeholder: \"Usuario\",\n          name: \"userName\",\n          type: \"text\",\n          value: userData.username,\n          onChange: handleUsername,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          class: \"row\",\n          id: \"Password\",\n          placeholder: \"Contrase\\xF1a\",\n          name: \"password\",\n          type: \"password\",\n          value: userData.password,\n          onChange: handlePassword,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          class: \"btn btn-outline-dark\",\n          onClick: registerUser,\n          children: \"Iniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(ChatRoom, \"4MZqpFBcOuX07MiYtwfKeuZg/Bo=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","alertify","stompClient","ChatRoom","axios","require","dataF","list","setList","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","password","console","log","Act","nameF","temp","forEach","dat","user_name","push","connect","config","method","url","then","response","resp","data","length","Sock","onConnected","onError","amigo","success","error","catch","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","handlePassword","registerUser","keys","map","name","index","user","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\n//import axios from \"axios\";\r\nimport alertify from 'alertifyjs';\r\nimport 'alertifyjs/build/css/alertify.css';\r\n\r\nvar stompClient = null;\r\nconst ChatRoom = () => {\r\n    var axios = require('axios');\r\n\r\n    let dataF = [];\r\n    const [list, setList] = useState([]);\r\n\r\n    const [privateChats, setPrivateChats] = useState(new Map());\r\n\r\n    const [publicChats, setPublicChats] = useState([]);\r\n    const [tab, setTab] = useState(\"CHATROOM\");\r\n    const [userData, setUserData] = useState({\r\n        username: '',\r\n        receivername: '',\r\n        connected: false,\r\n        message: '',\r\n        password: ''\r\n    });\r\n    useEffect(() => {\r\n        console.log(userData);\r\n    }, [userData]);\r\n\r\n    \r\n    const Act = (nameF) => {\r\n        console.log(nameF);\r\n        let temp = [];\r\n        dataF.forEach(dat => {\r\n            if(nameF !== dat.user_name){\r\n                temp.push(dat);\r\n                //console.log(\"son diferentes\");\r\n            }\r\n        });\r\n        dataF = temp;\r\n        setList(temp);\r\n    }\r\n\r\n    const connect = () => {\r\n        var config = {\r\n            method: 'get',\r\n            url: 'http://localhost:1921/api/usuario/' + userData.username + '/' + userData.password,\r\n        };\r\n        axios(config)\r\n            .then(function (response) {\r\n                let resp = response.data;\r\n                if (resp.length > 0) {\r\n                    let Sock = new SockJS('http://localhost:8080/ws');\r\n                    stompClient = over(Sock);\r\n                    stompClient.connect({}, onConnected, onError);\r\n                    resp.forEach(amigo => {\r\n                        dataF.push(amigo);\r\n                    });\r\n                    alertify.success('Bienvenido '+ userData.username);\r\n\r\n                } else {\r\n                    alertify.error(\"Usuario o ContraseÃ±a Erronea\");\r\n                    return;\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    const onConnected = () => {\r\n        setUserData({ ...userData, \"connected\": true });\r\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n        userJoin();\r\n    }\r\n\r\n    const userJoin = () => {\r\n        var chatMessage = {\r\n            senderName: userData.username,\r\n            status: \"JOIN\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n    }\r\n\r\n    const onMessageReceived = (payload) => {\r\n        var payloadData = JSON.parse(payload.body);\r\n\r\n        if (payloadData.status === \"JOIN\") {\r\n            if (!privateChats.get(payloadData.senderName)) {\r\n                privateChats.set(payloadData.senderName, []);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n        } else {\r\n            publicChats.push(payloadData);\r\n            setPublicChats([...publicChats]);\r\n        }\r\n\r\n        Act(payloadData.senderName);\r\n        \r\n\r\n    }\r\n\r\n    const onPrivateMessage = (payload) => {\r\n        console.log(payload);\r\n        var payloadData = JSON.parse(payload.body);\r\n        if (privateChats.get(payloadData.senderName)) {\r\n            privateChats.get(payloadData.senderName).push(payloadData);\r\n            setPrivateChats(new Map(privateChats));\r\n        } else {\r\n            let list = [];\r\n            list.push(payloadData);\r\n            privateChats.set(payloadData.senderName, list);\r\n            setPrivateChats(new Map(privateChats));\r\n        }\r\n\r\n        Act(payloadData.senderName);\r\n\r\n    }\r\n\r\n    const onError = (err) => {\r\n        console.log(err);\r\n\r\n    }\r\n\r\n    const handleMessage = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"message\": value });\r\n    }\r\n    const sendValue = () => {\r\n        console.log(list);\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n            console.log(chatMessage);\r\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n\r\n            alertify.success('Mensaje enviado a todos');\r\n        }\r\n    }\r\n\r\n    const sendPrivateValue = () => {\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                receiverName: tab,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n\r\n            if (userData.username !== tab) {\r\n                privateChats.get(tab).push(chatMessage);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n            alertify.success('Mensaje enviado a ' + tab);\r\n        }\r\n    }\r\n\r\n    const handleUsername = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"username\": value });\r\n    }\r\n\r\n    const handlePassword = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"password\": value });\r\n    }\r\n\r\n    const registerUser = () => {\r\n        connect();\r\n    }\r\n\r\n    return (\r\n        // CHAT\r\n\r\n        <div className=\"container\">\r\n            {userData.connected ?\r\n            //lista\r\n                <div className=\"chat-box\"> \r\n                   \r\n                    <div className=\"member-list\">\r\n                        <ul class=\"list-group list-group-horizontal position-relative overflow-auto w-75\">\r\n                            <li  class=\"list-group-item\" onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Todos</li>\r\n\r\n                            {[...privateChats.keys()].map((name, index) => (\r\n                                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\r\n                            ))}\r\n\r\n                            {[...list].map((user, index) => (\r\n                                <li className={`member ${tab === user.user_name && \"active\"}`} key={index}>{user.user_name}</li>\r\n                            ))}\r\n\r\n                        </ul>\r\n                    </div>\r\n\r\n\r\n                    {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {publicChats.map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">{chat.message}</div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"Mensaje de texto\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendValue}><i class=\"fa fa-send\"></i></button>\r\n                        </div>\r\n                    </div>}\r\n\r\n\r\n\r\n                    {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {[...privateChats.get(tab)].map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">{chat.message}</div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"Mensaje de texto\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}><i class=\"fa fa-send\"></i></button>\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n                :\r\n                // LOGIN\r\n                <div className=\"login\">\r\n                    <div className=\"title\">\r\n         Login\r\n        </div>\r\n               \r\n                    <input class=\"row\"\r\n                        id=\"user-name\"\r\n                        placeholder=\"Usuario\"\r\n                        name=\"userName\"\r\n                        type=\"text\"\r\n                        value={userData.username}\r\n                        onChange={handleUsername}\r\n                        required\r\n                    />\r\n                   \r\n                  \r\n                    <input class=\"row\"\r\n                        id=\"Password\"\r\n                        placeholder=\"ContraseÃ±a\"\r\n                        name=\"password\"\r\n                        type= \"password\"\r\n                        value={userData.password}\r\n                        onChange={handlePassword}\r\n                        required\r\n                    />\r\n                   \r\n                    <br></br>\r\n\r\n                    <button type=\"button\" class=\"btn btn-outline-dark\"\r\n                     onClick={registerUser}>\r\n                        Iniciar\r\n                    </button>\r\n                </div>\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom\r\n"]},"metadata":{},"sourceType":"module"}